name: Post From Issue

on:
  issues:
    types: [closed]

jobs:
  post-from-issue:
    if: ${{ github.actor == 'brandonbrinkley' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:

      - name: Issue Validation
        id: validation
        uses: actions/github-script@v7
        with:
          script: |

            // Set processing flag to 'true' by default
            core.setOutput('process_flag', 'true');

            // Get Issue data with API call
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number
            });

            // Verify issue was closed as complete
            console.log('Issue state:', issue.state);
            console.log('Reason:', issue.state_reason);
            if (issue.state === 'closed' && issue.state_reason === 'completed') {
              console.log('Issue closed as complete. Proceeding.');
            } else {
              console.log('Issue not closed as complete. Issue will not be processed.');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: 'Issue not closed as complete. Issue not processed.'
              });
              core.setOutput('process_flag', 'false');
            };
 
      - name: Checkout Repo
        id: checkout
        if: steps.validation.outputs.process_flag != 'false'
        uses: actions/checkout@v4
        with:
          ref: staging

      - name: Process
        id: process
        if: steps.validation.outputs.process_flag != 'false'
        run: |

          # Extract raw data from issue payload
          echo "Extracting Issue Data:"
          export ISSUE_NUM=${{ github.event.issue.number }}
          export ISSUE_TITLE="${{ github.event.issue.title }}"
          export ISSUE_BODY="${{ github.event.issue.body }}"
          export ISSUE_USER="${{ github.event.issue.user.login }}"
          export ISSUE_DATE="${{ github.event.issue.created_at }}"
          set | grep '^ISSUE_'
          echo ""

          # Extract and format data for the post
          echo "Extracting Post Data:"
          export POST_DATA_TITLE="${{ github.event.issue.title }}"
          export POST_DATA_URL=$(echo "$ISSUE_BODY" | grep -i '^URL:' | sed 's/URL:[[:space:]]*//i')
          export POST_DATA_AUTHOR=$(echo "$ISSUE_BODY" | grep -i '^Author:' | sed 's/Author:[[:space:]]*//i')
          export POST_DATA_PUBLISHER=$(echo "$ISSUE_BODY" | grep -i '^Publisher:' | sed 's/Publisher:[[:space:]]*//i')
          export POST_DATA_PUBDATE=$(echo "$ISSUE_BODY" | grep -i '^PubDate:' | sed 's/PubDate:[[:space:]]*//i' | { read gmt ; date -d "$gmt" +%m/%d/%Y ; } 2>/dev/null)
          export POST_DATA_CATEGORIES=$(echo "$ISSUE_BODY" | grep -i '^Categories:' | sed 's/Categories:[[:space:]]*//i')
          export POST_DATA_TYPE=$(echo "$ISSUE_BODY" | grep -i '^Type:' | sed 's/Type:[[:space:]]*//i')
          export POST_DATA_CAPTION=$(echo "$ISSUE_BODY" | grep -i '^Caption:' | sed 's/Caption:[[:space:]]*//i')
          set | grep '^POST_DATA_'
          echo ""

          # Extract and format data for the files
          echo "Extracting File Data:"
          export POST_FILE_DATE=$(date -d $POST_DATA_PUBDATE +%Y-%m-%d 2>/dev/null || date +%Y-%m-%d ;)
          export POST_FILE_TITLE=$(echo "$POST_DATA_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9 ]//g' | tr ' ' '-')
          export POST_FILE_AUTHOR=$(echo "$POST_DATA_AUTHOR" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9 ]//g' | tr ' ' '-')
          export POST_FILE_PUBLISHER=$(echo "$POST_DATA_PUBLISHER" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9 ]//g' | tr ' ' '-')
          export BASE_FILENAME="${POST_FILE_DATE}-${POST_FILE_AUTHOR}-${POST_FILE_PUBLISHER}-${POST_FILE_TITLE}"
          export POST_FILE_PATH="_posts"
          set | grep '^POST_FILE_'
          echo ""

          # Extract and format data for the image file
          echo "Extracting Image Data:"
          export POST_IMAGE_INFILE=$(echo "$ISSUE_BODY" | grep -i '^Image:' | sed 's/Image:[[:space:]]*//i')
          export POST_IMAGE_OUTFILE="${BASE_FILENAME}.${POST_IMAGE_INFILE##*.}"
          export POST_IMAGE_PATH="assets/images"
          set | grep '^POST_IMAGE_'
          echo ""

          # Image logic
          if [[ ! -f "$POST_IMAGE_PATH/new_images.txt" ]]; then
            touch $POST_IMAGE_PATH/new_images.txt
          fi
          if [[ -f "$POST_IMAGE_PATH/$POST_IMAGE_INFILE" && ! -f "$POST_IMAGE_PATH/$POST_IMAGE_OUTFILE" ]]; then
            # Case 1: infile exists and outfile does not
            echo "creating new image file."
            mv "$POST_IMAGE_PATH/$POST_IMAGE_INFILE" "$POST_IMAGE_PATH/$POST_IMAGE_OUTFILE"
            echo $POST_IMAGE_OUTFILE >> $POST_IMAGE_PATH/new_images.txt
          elif [[ ! -f "$POST_IMAGE_PATH/$POST_IMAGE_INFILE" && -f "$POST_IMAGE_PATH/$POST_IMAGE_OUTFILE" ]]; then
            # Case 2: outfile exists and infile does not
            echo "Action: No action required."
          elif [[ -f "$POST_IMAGE_PATH/$POST_IMAGE_INFILE" && -f "$POST_IMAGE_PATH/$POST_IMAGE_OUTFILE" ]]; then
            # Case 3: both infile and outfile exist
            echo "replacing image"
            rm "$POST_IMAGE_PATH/$POST_IMAGE_OUTFILE"
            mv "$POST_IMAGE_PATH/$POST_IMAGE_INFILE" "$POST_IMAGE_PATH/$POST_IMAGE_OUTFILE"
            echo $POST_IMAGE_OUTFILE >> $POST_IMAGE_PATH/new_images.txt
          else
            # Case 4: neither infile nor outfile exist
            echo "no file specified"
            POST_IMAGE_OUTFILE="test-pattern.png"
          fi
          
          # Produce the post markdown file
          cat assets/templates/post-template.md | envsubst > "${POST_FILE_PATH}/${BASE_FILENAME}.md"

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "action@github.com"
          git add _posts/
          git add assets/images
          git commit -m "Add post and image for issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"
          git push origin staging

